// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Etudiant
  Formateur
  Admin
  CreateurDeFormation
  Etablissement
}

model Mail {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  resetToken       String?
  resetTokenExpiry DateTime?
}

enum FileType {
  PDF
  IMAGE
  VIDEO
}

enum ContenuType {
  Cours
  Exercice
  Quiz
}

enum PeriodUnit {
  Day
  Week
  Month
}

model User {
  id         Int      @id @default(autoincrement())
  role       Role     @default(Etudiant)
  email      String   @unique
  password   String
  name       String?
  phone      String?
  profilePic String?
  location   String?
  skills     String[]
  about      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resetToken            String?
  resetTokenExpiry      DateTime?
  formateurs            Formateur[]
  Etudiants             Etudiant[]
  Createurs_De_Formations Createur_De_Formation[]
  Admins                Admin[]
  Etablissements        Etablissement[]
  ResetToken            ResetToken[]
}

model Formateur {
  id         Int    @id @default(autoincrement())
  speciality String
  User       User   @relation(fields: [userId], references: [id])
  userId     Int
}

model Etudiant {
  id                Int    @id @default(autoincrement())
  NameEtablissement String
  User              User   @relation(fields: [userId], references: [id])
  userId            Int
}

model Createur_De_Formation {
  id     Int  @id @default(autoincrement())
  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model Admin {
  id     Int  @id @default(autoincrement())
  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model Etablissement {
  id     Int  @id @default(autoincrement())
  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model ResetToken {
  id         Int      @id @default(autoincrement())
  token      String
  User       User     @relation(fields: [userId], references: [id])
  userId     Int
  expiryDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Program {
  id      Int             @id @default(autoincrement())
  name    String
  modules ProgramModule[]
}

model Module {
  id         Int             @id @default(autoincrement())
  name       String
  periodUnit PeriodUnit // type of duration
  duration   Int // how many
  programs   ProgramModule[]
  courses    ModuleCourse[]
}

model Course {
  id       Int            @id @default(autoincrement())
  title    String
  modules  ModuleCourse[]
  contenus Contenu[]
}

model Contenu {
  id       Int         @id @default(autoincrement())
  title    String
  fileUrl  String
  fileType FileType
  type     ContenuType
  course   Course      @relation(fields: [courseId], references: [id])
  courseId Int
}

model ProgramModule {
  id        Int     @id @default(autoincrement())
  program   Program @relation(fields: [programId], references: [id])
  programId Int
  module    Module  @relation(fields: [moduleId], references: [id])
  moduleId  Int

  @@unique([programId, moduleId])
}

model ModuleCourse {
  id       Int    @id @default(autoincrement())
  module   Module @relation(fields: [moduleId], references: [id])
  moduleId Int
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  @@unique([moduleId, courseId])
}
